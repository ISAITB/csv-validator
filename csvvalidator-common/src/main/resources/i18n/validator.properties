validator.label.popupTitle=CSV content
validator.label.externalSchemaLabel=Table Schema
validator.label.externalSchemaPlaceholder=Select file...
validator.label.includeExternalArtefacts=Include external schemas
validator.label.externalArtefactsTooltip=Additional schemas that will be considered for the validation
validator.label.csvSyntax=CSV syntax
validator.label.includeCsvSyntax=Specify CSV syntax settings
validator.label.includeCsvSyntaxTooltip=Define specific settings for the CSV syntax
validator.label.csvSyntaxQuotePlaceholder=Quote
validator.label.csvSyntaxQuoteTooltip=The quote character to consider when wrapping field values
validator.label.csvSyntaxDelimiterPlaceholder=Delimiter
validator.label.csvSyntaxDelimiterTooltip=The delimiter character used to separate field values
validator.label.csvSyntaxHeaders=Content has header
validator.label.csvSyntaxHeadersTooltip=Whether or not the first line of the content defines the field headers
validator.label.differentInputFieldCountViolationLevel=Number of input fields different from number of schema fields
validator.label.differentInputFieldSequenceViolationLevel=Sequence of input fields different from sequence of schema fields
validator.label.duplicateInputFieldsViolationLevel=Multiple input fields defined with the same name
validator.label.fieldCaseMismatchViolationLevel=Names of input fields with different casing compared to schema fields
validator.label.multipleInputFieldsForSchemaFieldViolationLevel=Multiple input fields mapped to the same schema field
validator.label.unknownInputViolationLevel=Input fields that are not defined in the schema
validator.label.unspecifiedSchemaFieldViolationLevel=Schema fields for which no input fields are defined
validator.label.differentInputFieldCountViolationLevelTooltip=The violation level in case the input field count doesn't match the schema field count
validator.label.differentInputFieldSequenceViolationLevelTooltip=The violation level in case the input fields' sequence doesn't match the schema fields' sequence
validator.label.duplicateInputFieldsViolationLevelTooltip=The violation level in case the duplicate input fields are found
validator.label.fieldCaseMismatchViolationLevelTooltip=The violation level in case input fields match schema fields but with different casing
validator.label.multipleInputFieldsForSchemaFieldViolationLevelTooltip=The violation level in case multiple input fields map to the same schema field
validator.label.unknownInputViolationLevelTooltip=The violation level in case of unknown input fields
validator.label.unspecifiedSchemaFieldViolationLevelTooltip=The violation level in case schema fields are not defined
validator.label.violationLevelError=Error
validator.label.violationLevelWarning=Warning
validator.label.violationLevelInfo=Information message
validator.label.violationLevelNone=None
validator.label.violationLevelHeader=Violation levels for findings on input field headers
validator.label.lineMessagePrefix=Row:
validator.label.fieldMessagePrefix=Field:
validator.parserError.missingHeader.message=The header field names could not be parsed. You have either defined consecutive field delimiter characters (commas) with blank contents or defined a trailing one at the end of the header.
validator.parserError.wrongDelimiter.message=The header field names could not be parsed. This is likely due to the field delimiter character (comma) used in the input not being the expected one.
validator.label.exception.providedInputNotCSV=Provided input is not a CSV file
validator.label.exception.errorReadingContent=Error while reading provided content: {0}
validator.label.exception.providedValidationTypeNotValid=Provided validation type is not valid
validator.label.exception.errorInUpload=Error in upload: {0}
validator.label.exception.errorGeneratingReport=Error generating detailed report: {0}
validator.label.exception.errorDuringValidation=An error occurred during the validation: {0}
validator.label.exception.errorValidatingExternalSchema=An error occurred during the validation of the external Schema(s)
validator.label.exception.requiredInputMissing=Required input [{0}] was missing
validator.label.exception.multipleInputsProvided=Multiple values provided for input [{0}]
validator.label.exception.emptyInputProvided=An empty value was provided for input [{0}]
validator.label.exception.unableToReadInputFile=Unable to read the provided input file
validator.label.exception.unableToReadInputSchema=Unable to read the provided schema file
validator.label.exception.providedSchemaCouldNotBeParsed=The provided schema could not be parsed: {0}
validator.label.exception.schemaDefinesTwoFieldsWithSameName=The schema defines two fields with the same name [{0}]
validator.label.exception.providedInputCouldNotBeParsed=The provided input could not be parsed: {0}
validator.label.exception.unexpectedErrorWhileValidatingRow=Unexpected error while validating row: {0}
validator.label.exception.requiredToSpecifyIfInputHasHeader=You are required to provide your choice on whether or not the input has a header row.
validator.label.exception.expectedDifferentInputFieldCountViolationLevel=You are required to define the violation level in case the input field count differs from the expected field count.
validator.label.exception.expectedDifferentInputFieldSequenceViolationLevel=You are required to define the violation level in case the input fields are provided in a different sequence than expected.
validator.label.exception.expectedUnknownInputFieldViolationLevel=You are required to define the violation level in case an unexpected input field is provided.
validator.label.exception.expectedUnspecifiedSchemaFieldViolationLevel=You are required to define the violation level in case an expected field is missing.
validator.label.exception.expectedInputFieldCaseMismatchViolationLevel=You are required to define the violation level in case a field name doesn't match its expected casing.
validator.label.exception.expectedDuplicateInputFieldsViolationLevel=You are required to define the violation level in case duplicate input fields are found.
validator.label.exception.expectedMultipleInputFieldsForSchemaFieldViolationLevel=You are required to define the violation level in case multiple input fields map to the same schema field.
validator.label.exception.expectedCharacterQuote=You are required to provide the quote character.
validator.label.exception.expectedSingleCharacterQuote=A single quote character is expected.
validator.label.exception.expectedCharacterDelimiter=You are required to provide the delimiter character.
validator.label.exception.expectedSingleCharacterDelimiter=A single delimiter character is expected.
validator.label.syntax.ambiguousHeader=Header ''{0}'' is ambiguous as it may refer to multiple schema fields ''{1}''.
validator.label.syntax.inputFieldCaseMismatch=Header ''{0}'' has different casing that the expected ''{1}''.
validator.label.syntax.unknownInputField=Found unexpected header ''{0}''.
validator.label.syntax.differentInputFieldSequence=Header ''{0}'' is defined at position [{1}] which is not the expected position [{2}].
validator.label.syntax.missingRequiredHeader=The defined header fields do not include the required field ''{0}''.
validator.label.syntax.unspecifiedSchemaField=The defined header fields do not include the optional field ''{0}''.
validator.label.syntax.differentInputFieldCount=The header field count [{0}] does not match the expected count [{1}].
validator.label.syntax.duplicateInputField=Header ''{0}'' is defined multiple times.
validator.label.syntax.multipleInputFieldsForSchemaField=Multiple headers {0} map to the same schema field ''{1}''.
validator.label.field.rowFieldCountDoesNotMatchHeaderCount=The row field count [{0}] does not match the number of defined headers [{1}].
validator.label.field.rowFieldCountNotMatchingExpectedCount=The row field count [{0}] does not match the expected count [{1}]. This is required when no headers are defined in the input.
validator.label.field.invalidFormat=Value ''{0}'' provided for field ''{1}'' is invalid for format ''{2}''.
validator.label.field.invalidType=Value ''{0}'' provided for field ''{1}'' could not be parsed. Expected type was ''{2}''.
validator.label.field.notInExpectedValues=Value ''{0}'' for field ''{1}'' is not in the list of expected values.
validator.label.field.notInExpectedValuesWithParam=Value ''{0}'' for field ''{1}'' is not in the list of expected values {2}.
validator.label.field.lengthExceedsMaximum=The length of value ''{0}'' for field ''{1}'' exceeds the maximum allowed length of {2}.
validator.label.field.lengthBelowMinimum=The length of value ''{0}'' for field ''{1}'' is less than the minimum allowed length of {2}.
validator.label.field.valueExceedsMaximum=Value ''{0}'' for field ''{1}'' exceeds the allowed maximum of {2}.
validator.label.field.valueBelowMinimum=Value ''{0}'' for field ''{1}'' is less than the minimum of {2}.
validator.label.field.valueNotMatchingPattern=Value ''{0}'' for field ''{1}'' does not match the expected pattern.
validator.label.field.missingValue=No value was provided for required field ''{0}''.
validator.label.field.expectedUniqueValue=Value ''{0}'' for field ''{1}'' must be unique.
validator.label.field.constraintViolated=Violation of constraint [{0}] for field ''{1}''. Provided value was ''{2}''.
validator.label.exception.invalidViolationLevel=Unknown violation level ''{0}''.